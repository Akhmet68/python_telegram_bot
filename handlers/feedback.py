from aiogram import Router, types, F
from aiogram.filters import Command
from database import async_session, add_feedback, Student
from sqlalchemy.future import select

router = Router()


@router.message(Command("feedback"))
async def start_feedback(message: types.Message):
    async with async_session() as session:
        res = await session.execute(select(Student).where(Student.tg_id == message.from_user.id))
        student = res.scalar()

    lang = student.language if student and student.language else "ru"

    texts = {
        "ru": (
            "üí¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n"
            "–ù–∞—á–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: '–û—Ç–∑—ã–≤:'.\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n–û—Ç–∑—ã–≤: –•–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ Intermediate —É—Ä–æ–≤–Ω–µ."
        ),
        "kz": (
            "üí¨ ”®–∑ –ø—ñ–∫—ñ—Ä—ñ“£–¥—ñ –Ω–µ–º–µ—Å–µ “±—Å—ã–Ω—ã—Å—ã“£–¥—ã –∂–∞–∑.\n"
            "–•–∞–±–∞—Ä–¥—ã '–ü—ñ–∫—ñ—Ä:' —Å”©–∑—ñ–º–µ–Ω –±–∞—Å—Ç–∞.\n\n"
            "–ú—ã—Å–∞–ª—ã:\n–ü—ñ–∫—ñ—Ä: Intermediate –¥–µ“£–≥–µ–π—ñ–Ω–¥–µ –∫”©–±—ñ—Ä–µ–∫ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä –±–æ–ª—Å–∞ –µ–∫–µ–Ω."
        ),
        "en": (
            "üí¨ Write your feedback or suggestion.\n"
            "Start your message with the keyword 'Feedback:'.\n\n"
            "Example:\nFeedback: I‚Äôd like to have more tasks at the Intermediate level."
        )
    }

    await message.answer(texts.get(lang, texts["ru"]))


@router.message(F.text.regexp(r"^(–û—Ç–∑—ã–≤:|–ü—ñ–∫—ñ—Ä:|Feedback:)"))
async def save_feedback(message: types.Message):
    feedback_text = (
        message.text
        .replace("–û—Ç–∑—ã–≤:", "")
        .replace("–ü—ñ–∫—ñ—Ä:", "")
        .replace("Feedback:", "")
        .strip()
    )

    if not feedback_text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.")
        return

    async with async_session() as session:
        res = await session.execute(select(Student).where(Student.tg_id == message.from_user.id))
        student = res.scalar()

        if not student:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /register")
            return

        lang = student.language or "ru"
        await add_feedback(session, student.id, feedback_text)

    responses = {
        "ru": "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—ë–º —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ ‚ù§Ô∏è",
        "kz": "üôè –ü—ñ–∫—ñ—Ä—ñ“£ “Ø—à—ñ–Ω —Ä–∞“õ–º–µ—Ç! –ë—ñ–∑ –º—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç“Ø—Ä–¥–µ –µ—Å–∫–µ—Ä–µ–º—ñ–∑ ‚ù§Ô∏è",
        "en": "üôè Thank you for your feedback! We truly appreciate it ‚ù§Ô∏è",
    }

    await message.answer(responses.get(lang, responses["ru"]))


@router.message(Command("show_feedbacks"))
async def show_feedbacks(message: types.Message):
    ADMIN_ID = 8249864320 

    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ—Ç–∑—ã–≤–æ–≤.")
        return

    from database import Feedback
    async with async_session() as session:
        res = await session.execute(select(Feedback))
        feedbacks = res.scalars().all()

    if not feedbacks:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ üí≠")
        return

    text = "üìã *–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    for f in feedbacks:
        text += f"üßë‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {f.user_id}:\n{f.message}\n\n"

    await message.answer(text, parse_mode="Markdown")
