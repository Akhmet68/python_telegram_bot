from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from database import async_session, Student
import json, os, random

router = Router()


# ============================
#  FSM –°–æ—Å—Ç–æ—è–Ω–∏—è
# ============================
class LessonMode(StatesGroup):
    choosing_mode = State()
    waiting_answer = State()


# ============================
#  –ü–µ—Ä–µ–≤–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# ============================
def tr(lang, key):
    data = {
        "ru": {
            "choose_mode": "üìö –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            "learn_topic": "üìñ –£—á–∏—Ç—å —Ç–µ–º—É",
            "take_test": "üß© –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
            "send": "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            "ok": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –±–∞–ª–ª",
            "bad": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /lesson, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            "nolevel": "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å: /level",
            "noreg": "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è: /register",
            "no_tasks": "üìö –ó–∞–¥–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç.",
            "topic_end": "üéØ –¢–µ–º–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç!"
        },
        "en": {
            "choose_mode": "üìö What do you want to do?",
            "learn_topic": "üìñ Learn topic",
            "take_test": "üß© Take test",
            "send": "Choose the correct answer:",
            "ok": "‚úÖ Correct! +1 point",
            "bad": "‚ùå Incorrect. Try again or use /lesson to start over.",
            "nolevel": "‚ö†Ô∏è Choose a level first: /level",
            "noreg": "‚ö†Ô∏è Please register first: /register",
            "no_tasks": "üìö No tasks available for this level yet.",
            "topic_end": "üéØ Topic completed! You can now take the test!"
        },
        "kz": {
            "choose_mode": "üìö –ù–µ —ñ—Å—Ç–µ–≥—ñ“£ –∫–µ–ª–µ–¥—ñ?",
            "learn_topic": "üìñ –¢–∞“õ—ã—Ä—ã–ø—Ç—ã –æ“õ—É",
            "take_test": "üß© –¢–µ—Å—Ç —Ç–∞–ø—Å—ã—Ä—É",
            "send": "–î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç—ã —Ç–∞“£–¥–∞:",
            "ok": "‚úÖ –î“±—Ä—ã—Å! +1 “±–ø–∞–π",
            "bad": "‚ùå –î“±—Ä—ã—Å –µ–º–µ—Å. “ö–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ /lesson –∂–∞–∑—ã“£—ã–∑.",
            "nolevel": "‚ö†Ô∏è –ê–ª–¥—ã–º–µ–Ω –¥–µ“£–≥–µ–π —Ç–∞“£–¥–∞: /level",
            "noreg": "‚ö†Ô∏è –ê–ª–¥—ã–º–µ–Ω —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑: /register",
            "no_tasks": "üìö –ë“±–ª –¥–µ“£–≥–µ–π–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä –∂–æ“õ.",
            "topic_end": "üéØ –¢–∞“õ—ã—Ä—ã–ø –∞—è“õ—Ç–∞–ª–¥—ã. –ï–Ω–¥—ñ —Ç–µ—Å—Ç —Ç–∞–ø—Å—ã—Ä—É“ì–∞ –±–æ–ª–∞–¥—ã!"
        },
    }
    return data.get(lang or "ru", data["ru"]).get(key, key)


# ============================
#  /lesson
# ============================
@router.message(Command("lesson"))
async def start_lesson(message: types.Message, state: FSMContext):
    async with async_session() as session:
        res = await session.execute(
            select(Student).where(Student.tg_id == message.from_user.id)
        )
        student = res.scalar()

    if not student:
        await message.answer(tr("ru", "noreg"))
        return

    if not student.level:
        await message.answer(tr(student.language, "nolevel"))
        return

    lang = student.language or "ru"

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=tr(lang, "learn_topic"), callback_data="mode_topic")],
            [types.InlineKeyboardButton(text=tr(lang, "take_test"), callback_data="mode_test")]
        ]
    )

    await message.answer(tr(lang, "choose_mode"), reply_markup=kb)
    await state.set_state(LessonMode.choosing_mode)


# ============================
#  –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
# ============================
@router.callback_query(LessonMode.choosing_mode)
async def choose_mode(callback: types.CallbackQuery, state: FSMContext):
    mode = callback.data.split("_")[1]

    async with async_session() as session:
        res = await session.execute(
            select(Student).where(Student.tg_id == callback.from_user.id)
        )
        student = res.scalar()

    lang = student.language or "ru"
    level = student.level or "beginner"

    # === –£—á–∏—Ç—å —Ç–µ–º—É ===
    if mode == "topic":
        topic_path = os.path.join("topics", f"{level}_{lang}.txt")
        if not os.path.exists(topic_path):
            await callback.message.answer(tr(lang, "no_tasks"))
            await state.clear()
            return

        with open(topic_path, "r", encoding="utf-8") as f:
            text = f.read()

        await callback.message.answer(f"üìñ {text}")
        await callback.message.answer(tr(lang, "topic_end"))
        await state.clear()
        return

    # === –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç ===
    elif mode == "test":
        json_path = os.path.join("prompts", f"{level}.json")
        if not os.path.exists(json_path):
            await callback.message.answer(tr(lang, "no_tasks"))
            await state.clear()
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
        with open(json_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        lang_data = data.get(lang)
        if not lang_data or "questions" not in lang_data:
            await callback.message.answer(tr(lang, "no_tasks"))
            await state.clear()
            return

        questions = lang_data["questions"]
        if not questions:
            await callback.message.answer(tr(lang, "no_tasks"))
            await state.clear()
            return

        # –í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞
        task = random.choice(questions)
        opts = task["options"]
        correct = str(task["answer"])

        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=f"{k}) {v}", callback_data=f"ans_{k}")]
                for k, v in opts.items()
            ]
        )

        await state.update_data(correct=correct, lang=lang)
        await callback.message.answer(f"üß© {task['question']}", reply_markup=kb)
        await state.set_state(LessonMode.waiting_answer)


# ============================
#  –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
# ============================
@router.callback_query(LessonMode.waiting_answer)
async def check_answer(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    correct = data.get("correct")
    chosen = callback.data.split("_")[1]

    if chosen == correct:
        async with async_session() as session:
            res = await session.execute(
                select(Student).where(Student.tg_id == callback.from_user.id)
            )
            student = res.scalar()
            if student:
                student.score += 1
                await session.commit()

        await callback.message.edit_text(tr(lang, "ok"))
        await state.clear()
    else:
        await callback.answer(tr(lang, "bad"), show_alert=True)
