from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from database import async_session, Student
import json
import os
import random

router = Router()

class LessonState(StatesGroup):
    waiting = State()

def tr(lang, key):
    data = {
        "ru": {
            "send": "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            "ok": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –±–∞–ª–ª",
            "bad": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /lesson –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
            "nolevel": "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å: /level",
            "noreg": "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è: /start",
            "no_tasks": "üìö –ó–∞–¥–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç.",
            "score": "üìä –¢–≤–æ–∏ –±–∞–ª–ª—ã: "
        },
        "en": {
            "send": "Choose the correct answer:",
            "ok": "‚úÖ Correct! +1 point",
            "bad": "‚ùå Incorrect. Try again or use /lesson for a new question.",
            "nolevel": "‚ö†Ô∏è Choose a level first: /level",
            "noreg": "‚ö†Ô∏è Please register first: /start",
            "no_tasks": "üìö No tasks available for this level yet.",
            "score": "üìä Your score: "
        },
        "kz": {
            "send": "–î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç—ã —Ç–∞“£–¥–∞:",
            "ok": "‚úÖ –î“±—Ä—ã—Å! +1 “±–ø–∞–π",
            "bad": "‚ùå –î“±—Ä—ã—Å –µ–º–µ—Å. “ö–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –∂–∞“£–∞ —Å“±—Ä–∞“õ “Ø—à—ñ–Ω /lesson –∂–∞–∑—ã“£—ã–∑.",
            "nolevel": "‚ö†Ô∏è –ê–ª–¥—ã–º–µ–Ω –¥–µ“£–≥–µ–π —Ç–∞“£–¥–∞: /level",
            "noreg": "‚ö†Ô∏è –ê–ª–¥—ã–º–µ–Ω —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑: /start",
            "no_tasks": "üìö –ë“±–ª –¥–µ“£–≥–µ–π–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä –∂–æ“õ.",
            "score": "üìä “∞–ø–∞–π—ã“£—ã–∑: "
        },
    }
    return data.get(lang or "ru", data["ru"])[key]

def load_questions(level: str):
    path = os.path.join("prompts", f"{level}.json")
    if not os.path.exists(path):
        return []
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    if isinstance(data, dict) and "questions" in data:
        return data["questions"]
    if isinstance(data, list):
        return data
    return []

@router.message(Command("lesson"))
async def start_lesson(message: types.Message, state: FSMContext):
    async with async_session() as session:
        res = await session.execute(select(Student).where(Student.tg_id == message.from_user.id))
        student = res.scalar()
    if not student:
        await message.answer(tr("ru", "noreg"))
        return
    if not student.level:
        await message.answer(tr(student.language, "nolevel"))
        return

    tasks = load_questions(student.level)
    if not tasks:
        await message.answer(tr(student.language, "no_tasks"))
        return

    task = random.choice(tasks)
    question = task.get("question", "")
    options_dict = task.get("options", {})
    correct_letter = str(task.get("answer")).strip()

    letters = sorted(options_dict.keys())
    keyboard_rows = []
    for letter in letters:
        text = f"{letter}) {options_dict[letter]}"
        keyboard_rows.append([types.InlineKeyboardButton(text=text, callback_data=f"answer_{letter}")])
    kb = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    await state.update_data(correct=correct_letter, lang=student.language)
    await message.answer(f"üß© {question}\n\n{tr(student.language, 'send')}", reply_markup=kb)
    await state.set_state(LessonState.waiting)

@router.callback_query(LessonState.waiting)
async def check_answer(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    correct = data.get("correct")
    if not callback.data.startswith("answer_"):
        await callback.answer()
        return
    chosen = callback.data.split("_", 1)[1].strip()

    if chosen == str(correct).strip():
        async with async_session() as session:
            res = await session.execute(select(Student).where(Student.tg_id == callback.from_user.id))
            student = res.scalar()
            if student:
                student.score += 1
                await session.commit()
        await callback.message.edit_text(tr(lang, "ok"))
        await state.clear()
    else:
        await callback.answer(tr(lang, "bad"), show_alert=True)

@router.message(Command("score"))
async def show_score(message: types.Message):
    async with async_session() as session:
        res = await session.execute(select(Student).where(Student.tg_id == message.from_user.id))
        student = res.scalar()
    if not student:
        await message.answer(tr("ru", "noreg"))
        return
    await message.answer(f"{tr(student.language, 'score')}{student.score}")
