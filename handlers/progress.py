from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy.future import select
from database import async_session, Student, Progress

router = Router()


# üìä –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("progress"))
async def show_progress(message: types.Message):
    user_id = message.from_user.id

    async with async_session() as session:
        # –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        res = await session.execute(select(Student).where(Student.tg_id == user_id))
        student = res.scalar()

        if not student:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /register")
            return

        lang = student.language or "ru"

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        res = await session.execute(select(Progress).where(Progress.user_id == student.id))
        progress_list = res.scalars().all()

    if not progress_list:
        if lang == "kz":
            await message.answer("üìä –°—ñ–∑–¥–µ ”ô–ª—ñ –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—É—Ä–∞–ª—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä –∂–æ“õ üòÖ")
        elif lang == "en":
            await message.answer("üìä You don‚Äôt have any progress data yet üòÖ")
        else:
            await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ üòÖ")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    if lang == "kz":
        text = f"üìà *–°—ñ–∑–¥—ñ“£ –æ“õ—É –±–∞—Ä—ã—Å—ã“£—ã–∑:*\n\n"
        for p in progress_list:
            percent = int(p.correct_answers / p.total_questions * 100) if p.total_questions else 0
            text += f"üîπ {p.topic}: {percent}% ({p.correct_answers}/{p.total_questions})\n"
        text += "\n–ñ–∞—Ä–∞–π—Å—ã“£! –ñ–∞–ª“ì–∞—Å—Ç—ã—Ä–∞ –±–µ—Ä üí™"
    elif lang == "en":
        text = f"üìà *Your learning progress:*\n\n"
        for p in progress_list:
            percent = int(p.correct_answers / p.total_questions * 100) if p.total_questions else 0
            text += f"üîπ {p.topic}: {percent}% ({p.correct_answers}/{p.total_questions})\n"
        text += "\nKeep it up! üí™"
    else:
        text = f"üìà *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:*\n\n"
        for p in progress_list:
            percent = int(p.correct_answers / p.total_questions * 100) if p.total_questions else 0
            text += f"üîπ {p.topic}: {percent}% ({p.correct_answers}/{p.total_questions})\n"
        text += "\n–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™"

    await message.answer(text, parse_mode="Markdown")



# üßÆ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞)
async def update_progress(user_id: int, topic: str, correct: int, total: int):
    async with async_session() as session:
        res = await session.execute(select(Student).where(Student.tg_id == user_id))
        student = res.scalar()

        if not student:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –ø–æ —ç—Ç–æ–º—É —Ç–æ–ø–∏–∫—É
        res = await session.execute(
            select(Progress).where(
                Progress.user_id == student.id, Progress.topic == topic
            )
        )
        progress = res.scalar()

        if progress:
            progress.correct_answers = correct
            progress.total_questions = total
        else:
            new_progress = Progress(
                user_id=student.id,
                topic=topic,
                correct_answers=correct,
                total_questions=total,
            )
            session.add(new_progress)

        await session.commit()
